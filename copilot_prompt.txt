# 目的
私は「軍儀（Gungi）」というボードゲームを題材に，
深層強化学習（Deep Reinforcement Learning）を使って敵AIを作り，
Webブラウザ上で人間と対戦できるようにしたい．

# 既に持っているもの
1. 軽く作った軍儀のプログラム（Python）
   - ルールの多くは再現済み
   - 駒の動きや配置を変更できる
   - 間違っているかもしれないので「ルール.txt」を確認して
2. 初期盤面.txt
   - 公式の初期配置をテキストで定義したもの．「初期盤面.txt」を参考
3. やりたいこと.txt
   - 目的と開発方針のメモ

# やりたいこと（AIへの依頼内容）
1. 軍儀のルールエンジンを整理・最小化し，
   「正式初期配置」から自動で対局を開始できるようにする．
2. このエンジンを使って，
   深層強化学習（AlphaZero型）で自己対戦し，   攻撃AI（敵プレイヤー）を育てたい．「モデルの構成.txt」を参考
3. 学習済みモデルをWeb上で公開し，
   ユーザーがブラウザでAIと対戦できるようにする．
   - UIは将棋アプリのような直感的なものにしたい
   - FastAPI（Python）でAIの推論APIを作成
   - ReactまたはHTML/JSで盤面描画・対戦を実装
4. 推論を高速化し，1手2秒以内に応答できるようにする．

# 課題と注意点
- ルールを忠実に再現したい（軍儀特有の配置・昇格・堅牢性）
- 学習が破綻しないように，簡易ルールで実験段階を踏む
- 推論（AIの手を返す処理）をWeb経由で安定化
- UIをできるだけシンプルかつ操作しやすく

# 作ってほしいもの（順番）
1. FastAPIで `/predict` `/new_game` `/apply_move` エンドポイントをもつサーバ
2. 軍儀のBoardクラス，Moveクラス，RuleSetクラス（合法手・終局判定）
3. ReactまたはHTML/Canvasで動く盤面UI．とにかく，座標入力ではなく，クリックなどでコマを動かしたい．がこれはゲームをプレイするときで，学習時は無視して良い．
4. PyTorchで方策＋価値ネットのひな形
5. 学習・推論・Web連携までの最小構成テンプレート

# 出力フォーマット
- 各ステップのディレクトリ構成を明示
- 実装例はPython 3.10以降を前提
- Web側はVercelでデプロイ可能な構成に
